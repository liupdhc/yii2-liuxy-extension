<?php
namespace yii\liuxy\redis;

use yii\base\Component;
use yii\base\InvalidConfigException;
/**
 * Represents a redis connection.
 *
 * @author Charles Pick
 * @package yii\liuxy\redis
 */
class ARedisConnection extends Component {
	/**
	 * The redis client
	 * @var \Redis
	 */
	protected $_client;

	/**
	 * The redis server name
	 * @var string
	 */
	public $hostname = "localhost";

	/**
	 * The redis server port
	 * @var integer
	 */
	public $port=6379;

	/**
	 * The database to use, defaults to 1
	 * @var integer
	 */
	public $database=0;

    /**
     * The redis server password
     * @var password
     */
    public $password=null;
    /**
     * @var boolean whether to enable read/write splitting by using [[slaves]] to read data.
     * Note that if [[slaves]] is empty, read/write splitting will NOT be enabled no matter what value this property takes.
     */
    public $enableSlaves = true;
    /**
     * @var array list of slave connection configurations. Each configuration is used to create a slave Redis connection.
     * When [[enableSlaves]] is true, one of these configurations will be chosen and used to create a Redis connection
     * for performing read queries only.
     * @see enableSlaves
     * @see slaveConfig
     */
    public $slaves = [];

    /**
     * @var Connection the currently active slave connection
     */
    private $_slave = false;

	public function init () {
		parent::init (); // TODO: Change the autogenerated stub
		$this->getClient();
	}

	/**
     * Sets the redis slave to use with this connection
     * @param \Redis $slave the redis slave instance
     */
    public function setSlave(\Redis $_slave)
    {
    	$this->_slave = $_slave;
    }
    
    /**
     * Gets the redis slave
     * @return \Redis the redis slave
     */
    public function getSlave()
    {
    	return $this->_slave;
    }

	/**
	 * Sets the redis client to use with this connection
	 * @param \Redis $client the redis client instance
	 */
	public function setClient(\Redis $client)
	{
		$this->_client = $client;
	}

	/**
	 * Gets the redis client
	 * @return \Redis the redis client
	 */
	public function getClient()
	{
		if ($this->_client === null) {
			$this->_client = new \Redis;
			$this->_client->connect($this->hostname, $this->port, $this->database);
			$slaveenable = false;
			if ($this->enableSlaves) {
				while(count($this->slaves)>0){
					$this->_slave = new \Redis();
					$select_slave = self::getByWeight($this->slaves);//随机访问一台redis从服务器
					$slaveenable = $this->_slave->connect($select_slave['hostname'], $select_slave['port'], $this->database);
					if ($slaveenable) {
						if (isset($select_slave['password'])) {
							if ($this->_slave->auth($select_slave['password']) === false) {
								throw new InvalidConfigException('Redis Slave authentication failed!');
							}
						}
						break;
					}			
				}
			}
			if (!$slaveenable) {
				$this->_slave = $this->_client;
				$this->enableSlaves = false;
			}
			if (isset($this->password)) {
				if ($this->_client->auth($this->password) === false) {
					throw new InvalidConfigException('Redis authentication failed!');
				}
			}
			//$this->_client->select($this->database);
		}
		return $this->_client;
	}

	/**
	 * Returns a property value based on its name.
	 * Do not call this method. This is a PHP magic method that we override
	 * to allow using the following syntax to read a property
	 * <pre>
	 * $value=$component->propertyName;
	 * </pre>
	 * @param string $name the property name
	 * @return mixed the property value
	 * @throws InvalidConfigException if the property is not defined
	 * @see __set
	 */
	public function __get($name) {
		$getter='get'.$name;
		if (property_exists($this->getSlave(),$name)) {
			return $this->getClient()->{$name};
		}
		elseif(method_exists($this->getSlave(),$getter)) {
			return $this->$getter();
		}
		return parent::__get($name);
	}

	/**
	 * Sets value of a component property.
	 * Do not call this method. This is a PHP magic method that we override
	 * to allow using the following syntax to set a property
	 * <pre>
	 * $this->propertyName=$value;
	 * </pre>
	 * @param string $name the property name
	 * @param mixed $value the property value
	 * @return mixed
	 * @throws InvalidConfigException if the property is not defined or the property is read only.
	 * @see __get
	 */
	public function __set($name,$value)
	{
		$setter='set'.$name;
		if (property_exists($this->getClient(),$name)) {
			return $this->getClient()->{$name} = $value;
		}
		elseif(method_exists($this->getClient(),$setter)) {
			return $this->getClient()->{$setter}($value);
		}
		return parent::__set($name,$value);
	}

	/**
	 * Checks if a property value is null.
	 * Do not call this method. This is a PHP magic method that we override
	 * to allow using isset() to detect if a component property is set or not.
	 * @param string $name the property name
	 * @return boolean
	 */
	public function __isset($name)
	{
		$getter='get'.$name;
		if (property_exists($this->getSlave(),$name)) {
			return true;
		}
		elseif (method_exists($this->getSlave(),$getter)) {
			return true;
		}
		return parent::__isset($name);
	}

	/**
	 * Sets a component property to be null.
	 * Do not call this method. This is a PHP magic method that we override
	 * to allow using unset() to set a component property to be null.
	 * @param string $name the property name or the event name
	 * @throws InvalidConfigException if the property is read only.
	 * @return mixed
	 */
	public function __unset($name)
	{
		$setter='set'.$name;
		if (property_exists($this->getClient(),$name)) {
			$this->getClient()->{$name} = null;
		}
		elseif(method_exists($this,$setter)) {
			$this->$setter(null);
		}
		else {
			parent::__unset($name);
		}
	}
	/**
	 * Calls a method on the redis client with the given name.
	 * Do not call this method. This is a PHP magic method that we override to
	 * allow a facade in front of the redis object.
	 * @param string $name the name of the method to call
	 * @param array $parameters the parameters to pass to the method
	 * @return mixed the response from the redis client
	 */
	public function __call($name, $parameters) {
		return call_user_func_array(array($this->getClient(),$name),$parameters);
	}

	/**
	 * 根据权重返回节点
	 * @param $data 数据格式：[['weight'=>1,...].['weight'=>2,...]]
	 */
	public static function getByWeight($data) {
		if ($data == null || count ( $data ) == 0) {
			return null;
		}
		$weight = 0;
		$tempdata = [ ];
		foreach ( $data as $one ) {
			if (is_array($one)) {
				if (! isset ( $one ['weight'] )) {
					return $data [0];
				}
				$weight += $one ['weight'];
				for($i = 0; $i < $one ['weight']; $i ++) {
					$tempdata [] = $one;
				}
			} else {
				$tempdata [] = $one;
			}
		}
		$use = rand ( 0, $weight - 1 );
		return $tempdata [$use];
	}
}
