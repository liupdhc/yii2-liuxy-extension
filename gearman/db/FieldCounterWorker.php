<?php
/**
 * FileName: UpdateFieldWorker.php
 * Author: liupeng
 * Date: 11/16/15
 */

namespace yii\liuxy\gearman\db;


use yii\db\Query;
use yii\liuxy\gearman\Worker;

/**
 * 支持异步累计更新表字段（int型）,表名、更新字段和查询条件组成的json字符串的md5值作为累计标识
 *
 * 子类集成范例：
 *
 * class ExampleWorker extends \yii\liuxy\gearman\db\FieldCounterWorker {
 *
 *      protected $step = 5;//设定累计更新的数量
 *      protected $db = 'topic_db';//设定yii2配置文件中的数据库名
 *
 * }
 *
 * 客户端调用范例：
 *
 * $client = new \yii\liuxy\gearman\Client();
 * $client->doBackground('topic/worker/counter/follower',json_encode(
    [
 *      'topic_count',//表名
 *      ['value'=>1],//更新字段数组
 *      ['topic_id'=>1,'type'=>1]//查询条件，非必须
 *  ]
 * ));
 *
 * 注意：传递参数一定注意参数的大小写、单双引号等
 *
 * Class FieldCounterWorker
 * @package yii\liuxy\gearman\db
 */
abstract class FieldCounterWorker extends Worker {

    protected $step = 1;

    protected $db = null;

    /**
     * 包含要更新的字段和查询条件
     * @var array
     */
    protected $operations = [];

    protected $counter = [];

    protected function cleanUp() {
        // TODO: Implement cleanUp() method.
        if ($this->db == null) {
            return false;
        }
        $db = $this->db;
        /**
         * @var $dbObject \yii\db\Connection
         */
        $dbObject = \Yii::$app->$db;
        if ($dbObject == null) {
            return false;
        }
        if ($dbObject->getIsActive()) {
            $dbObject->close();
        }
        return true;
    }

    protected function release() {
        if (count($this->operations) > 0) {
            foreach($this->operations as $k=>$val) {
                $this->executeSql($k);
            }
        }
        parent::release(); // TODO: Change the autogenerated stub
    }


    public function daemonExecute($job) {
        $this->execute($job);
    }

    private function execute($job) {
        $workload = $job->workload();
        $workload_size = $job->workloadSize();

        if (strlen($workload) != $workload_size) {
            return false;
        }

        if ($this->db == null) {
            return false;
        }
        $key = md5($workload);
        $data = json_decode($workload, true);
        if (count($data) < 2) {
            return false;
        }
        $table = $data[0];
        $fields = $data[1];
        $where = [];
        if (count($data) >= 3) {
            $where = $data[2];
        }
        if (array_key_exists($key, $this->operations)) {
            $oldFields = $this->operations[$key]['field'];

            foreach($fields as $k=>$val) {
                if (array_key_exists($k, $oldFields)) {
                    $oldFields[$k] += intval($val);
                }
            }
            $this->operations[$key]['field'] = $oldFields;

            $this->counter[$key]['step'] += 1;
        } else {
            $this->operations[$key] = [
                'table'=>$table,
                'field'=>$fields,
                'where'=>$where
            ];
            $this->counter[$key]['step'] = 1;
        }

        if (intval($this->counter[$key]['step']) >= $this->step) {
            $this->counter[$key]['step'] = 0;
            $this->executeSql($key);
        }
    }

    private function executeSql($key) {

        $table = $this->operations[$key]['table'];
        $field = $this->operations[$key]['field'];
        $where = $this->operations[$key]['where'];
        unset($this->operations[$key]);

        $db = $this->db;
        /**
         * @var $dbObject \yii\db\Connection
         */
        $dbObject = \Yii::$app->$db;
        if (!$dbObject->getIsActive()) {
            $dbObject->open();
        }

        $query = (new Query())->select(implode(',', array_keys($field)))->from($table)->where($where);
        $exists = $query->createCommand($dbObject)->queryOne();
        if ($exists) {
            foreach($field as $key=>&$val) {
                $val += $exists[$key];
            }
            $dbObject->createCommand()->update($table, $field, $where)->execute();
        } else {
            $dbObject->createCommand()->insert($table, array_merge($where,$field))->execute();
        }
        unset($exists);
        unset($query);

        unset($table);
        unset($field);
        unset($where);
    }

}